#include <iostream>
#include <string>
using namespace std;

struct Product {
    string name;
    int price;
};

// Function to add a product to the list
void addProduct(Product products[], int& n, const string& name, int price) {
    products[n] = {name, price};
    n++;
    cout << "Product added successfully." << endl; // Success message
}

// Function to remove a product from the list by name
bool removeProduct(Product products[], int& n, const string& name) {
    for (int i = 0; i < n; ++i) {
        if (products[i].name == name) {
            // Shift products left to fill the gap
            for (int j = i; j < n - 1; ++j) {
                products[j] = products[j + 1];
            }
            n--;
            cout << "Product removed successfully." << endl; // Success message
            return true;
        }
    }
    return false; // Product not found
}

// Function to display all products
void displayProducts(const Product products[], int n) {
    if (n == 0) {
        cout << "No products to display." << endl;
        return;
    }
    cout << "Products List:" << endl;
    for (int i = 0; i < n; ++i) {
        cout << "Product: " << products[i].name << ", Price: BDT " << products[i].price << endl;
    }
}

// Function to sort products by price using insertion sort
void insertionSort(Product products[], int n) {
    for (int i = 1; i < n; ++i) {
        Product current = products[i];
        int j = i - 1;
        // Shift elements of products[0..i-1] that are greater than current.price
        while (j >= 0 && products[j].price > current.price) {
            products[j + 1] = products[j];
            j--;
        }
        products[j + 1] = current;
    }
}

int main() {
    Product productList[100];
    int n = 0; // Number of products
    cout << "\n        ## Product Management System ##" << endl;
    cout<< endl;
    while (true) {

        cout << "1. Display Products" << endl;
        cout << "2. Add Product" << endl;
        cout << "3. Remove Product" << endl;
        cout << "4. Sort Products" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        
        int choice;
        cin >> choice;
        cin.ignore(); // Ignore newline character left in the input buffer
        
        switch (choice) {
            case 1:
                displayProducts(productList, n);
                break;

            case 2: {
                string name;
                int price;
                cout << "Enter product name: ";
                getline(cin, name);
                cout << "Enter product price: ";
                cin >> price;
                cin.ignore(); // Ignore newline character left in the input buffer
                addProduct(productList, n, name, price);
                break;
            }

            case 3: {
                string name;
                cout << "Enter product name to remove: ";
                getline(cin, name);
                if (!removeProduct(productList, n, name)) {
                    cout << "Product not found!" << endl;
                }
                break;
            }

            case 4:
                insertionSort(productList, n);
                cout << "Products sorted by price." << endl;
                break;

            case 5:
                cout << "Exiting program." << endl;
                return 0;

            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    }

    return 0;
}